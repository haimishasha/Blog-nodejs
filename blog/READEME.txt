app.js：启动文件，或者说入口文件

package.json：存储着工程的信息及模块依赖，当在 dependencies 中添加依赖的模块时，运行 npm install，npm 会检查当前目录下的 package.json，并自动安装所有指定的模块

node_modules：存放 package.json 中安装的模块，当你在 package.json 添加依赖的模块并安装后，存放在这个文件夹下

public：存放 image、css、js 等文件

routes：存放路由文件

views：存放视图文件或者说模版文件

bin：存放可执行文件


app.js

这里我们通过require()加载了express、path 等模块,以及 routes 文件夹下的index. js和 users.js 路由文件。 下面来讲解每行代码的含义。

(1) var app = express()：生成一个express实例 app。
(2)app.set('views', path.join(__dirname, 'views’))：设置 views 文件夹为存放视图文件的目录, 即存放模板文件的地方,__dirname 为全局变量,存储当前正在执行的脚本所在的目录。
(3)app.set('view engine', 'ejs’)：设置视图模板引擎为 ejs。
(4)app.use(favicon(__dirname + '/public/favicon.ico’))：设置/public/favicon.ico为favicon图标。
(5)app.use(logger('dev’))：加载日志中间件。
(6)app.use(bodyParser.json())：加载解析json的中间件。
(7)app.use(bodyParser.urlencoded({ extended: false }))：加载解析urlencoded请求体的中间件。
(8)app.use(cookieParser())：加载解析cookie的中间件。
(9)app.use(express.static(path.join(__dirname, 'public')))：设置public文件夹为存放静态文件的目录。
(10)app.use('/', routes);和app.use('/users', users)：路由控制器。
(11)捕获404错误，并转发到错误处理器。
(12)开发环境下的错误处理器，将错误信息渲染error模版并显示到浏览器中。
(13)生产环境下的错误处理器，将错误信息渲染error模版并显示到浏览器中。
(14)module.exports = app ：导出app实例供其他模块调用。



使用 express-session 和 connect-mongo 模块实现了将会化信息存储到mongoldb中。